version: '3.8'

services:
  web:
    build: .
    command: gunicorn content_generator.wsgi:application --config gunicorn_config.py
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  celery:
    build: .
    command: celery -A content_generator worker -l info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
    networks:
      - app_network

  celery-beat:
    build: .
    command: celery -A content_generator beat -l info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
    networks:
      - app_network

  bot:
    build: .
    command: python manage.py run_bot
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - db
    networks:
      - app_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app_network:
    driver: bridge 