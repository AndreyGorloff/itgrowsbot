import os
import asyncio
import logging
from typing import Optional, Dict, Any
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    Defaults
)
from django.conf import settings
from asgiref.sync import sync_to_async
from ..models import Post, Topic, Settings, OpenAISettings
import telegram
import nest_asyncio
from .openai_service import OpenAIService

logger = logging.getLogger(__name__)

# Apply nest_asyncio to allow nested event loops
nest_asyncio.apply()

class TelegramService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
    """
    
    def __init__(self):
        self._loop = None
        self.application = None
        self.settings = None

    async def start_bot(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
        """
        try:
            # Get settings
            self.settings = await sync_to_async(Settings.get_active)()
            if not self.settings or not self.settings.telegram_bot_token:
                raise ValueError("Telegram bot token not configured")
            
            logger.info("Initializing bot...")
            
            # Create application with default settings
            defaults = Defaults(
                parse_mode='HTML'
            )
            
            self.application = Application.builder()\
                .token(self.settings.telegram_bot_token)\
                .defaults(defaults)\
                .build()
            
            # Add handlers
            self.application.add_handler(CommandHandler("start", self._start_command))
            self.application.add_handler(CommandHandler("help", self._help_command))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
            
            # Initialize with retries
            max_retries = 3
            retry_delay = 5
            
            for attempt in range(max_retries):
                try:
                    logger.info(f"Attempt {attempt + 1} to initialize bot...")
                    await self.application.initialize()
                    break
                except Exception as e:
                    if attempt == max_retries - 1:
                        raise
                    logger.warning(f"Initialization attempt {attempt + 1} failed: {str(e)}")
                    await asyncio.sleep(retry_delay)
            
            logger.info("Starting bot polling...")
            await self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"Error running bot: {str(e)}", exc_info=True)
            raise

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º event loop
        """
        try:
            self._loop = asyncio.get_event_loop()
            self._loop.run_until_complete(self.start_bot())
        except Exception as e:
            logger.error(f"Error in run: {str(e)}", exc_info=True)
            raise
        finally:
            if self._loop and self._loop.is_running():
                self._loop.stop()
            if self.application:
                self._loop.run_until_complete(self.application.stop())
            if self._loop:
                self._loop.close()

    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. "
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É, –∏ —è –ø–æ–º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é."
        )

    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        """
        await update.message.reply_text(
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É, –∏ —è —Å–æ–∑–¥–∞–º —Å—Ç–∞—Ç—å—é."
        )

    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle incoming messages."""
        try:
            message = update.message
            if not message or not message.text:
                return

            # Get OpenAI settings
            openai_settings = await sync_to_async(OpenAISettings.get_active)()
            if not openai_settings or not openai_settings.api_key:
                await message.reply_text(
                    "‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
                )
                return

            # Create a random topic
            topic = await sync_to_async(Topic.objects.order_by('?').first)()
            if not topic:
                await message.reply_text(
                    "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–º—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
                )
                return

            # Create a post
            post = await sync_to_async(Post.objects.create)(
                topic=topic,
                status='draft',
                author=message.from_user.username or str(message.from_user.id)
            )

            # Format prompt for content generation
            prompt = f"""
            –ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É "{topic.title}" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
            {f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {topic.description}" if topic.description else ""}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ:
            1. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –∏ –ø–æ–ª–µ–∑–Ω–∞—è
            2. –•–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
            3. –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ–º–∞—è
            4. –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            
            –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            
            –í–≤–µ–¥–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            
            –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (3-4 –∞–±–∑–∞—Ü–∞)
            
            –ó–∞–∫–ª—é—á–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            """

            # Generate content
            content = self.openai_service.generate_content(
                prompt=prompt,
                api_key=openai_settings.api_key
            )

            if not content:
                await message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            # Update post with generated content
            post.content = content
            post.status = 'published'
            await sync_to_async(post.save)()

            # Send the generated content to the user
            await message.reply_text(content)

        except Exception as e:
            logger.error(f"Error handling message: {str(e)}")
            await message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def send_message(self, text, parse_mode='HTML'):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        """
        return self.bot.send_message(
            chat_id=self.channel_id,
            text=text,
            parse_mode=parse_mode
        )
    
    def edit_message(self, message_id, text, parse_mode='HTML'):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        """
        return self.bot.edit_message_text(
            chat_id=self.channel_id,
            message_id=message_id,
            text=text,
            parse_mode=parse_mode
        )

    async def generate_content(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        content_type: str = 'random'
    ):
        """Generate content based on type."""
        try:
            # Get random topic from database
            topic = await sync_to_async(Topic.objects.order_by('?').first)()
            if not topic:
                await update.message.reply_text("No topics available in database.")
                return

            # Get OpenAI settings
            openai_settings = await sync_to_async(OpenAISettings.get_active)()
            if not openai_settings or not openai_settings.api_key:
                raise ValueError("OpenAI API key not configured")

            # Generate content using OpenAI
            try:
                content = OpenAIService.generate_content(
                    topic=topic.name,
                    description=topic.description,
                    language=topic.language if hasattr(topic, 'language') else 'ru',
                    api_key=openai_settings.api_key
                )
            except Exception as e:
                logger.error(f"OpenAI error: {str(e)}")
                raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")

            if not content:
                await update.message.reply_text("Failed to generate content.")
                return

            # Create post in database
            post = await sync_to_async(Post.objects.create)(
                topic=topic,
                content=content,
                language=topic.language if hasattr(topic, 'language') else 'ru',
                created_by=update.effective_user
            )

            # Send content with inline buttons
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ Regenerate", callback_data=f"regenerate_{post.id}"),
                    InlineKeyboardButton("üìù Edit", callback_data=f"edit_{post.id}")
                ],
                [
                    InlineKeyboardButton("üì¢ Publish", callback_data=f"publish_{post.id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                content,
                reply_markup=reply_markup
            )

        except Exception as e:
            await update.message.reply_text(f"Error: {str(e)}")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline buttons."""
        query = update.callback_query
        await query.answer()

        action, post_id = query.data.split('_')
        post = await sync_to_async(Post.objects.get)(id=post_id)

        if action == "regenerate":
            # Get OpenAI settings
            openai_settings = await sync_to_async(OpenAISettings.get_active)()
            if not openai_settings or not openai_settings.api_key:
                raise ValueError("OpenAI API key not configured")

            # Regenerate content
            try:
                new_content = OpenAIService.generate_content(
                    topic=post.topic.name,
                    description=post.topic.description,
                    language=post.language,
                    api_key=openai_settings.api_key
                )
            except Exception as e:
                logger.error(f"OpenAI error: {str(e)}")
                await query.edit_message_text(
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}",
                    reply_markup=query.message.reply_markup
                )
                return

            if new_content:
                post.content = new_content
                await sync_to_async(post.save)()
                await query.edit_message_text(
                    text=new_content,
                    reply_markup=query.message.reply_markup
                )

        elif action == "publish":
            # Publish to channel
            try:
                message = await self.bot.send_message(
                    chat_id=self.channel_id,
                    text=post.content
                )
                post.telegram_message_id = message.message_id
                post.status = 'published'
                await sync_to_async(post.save)()
                await query.edit_message_text(
                    text=f"{post.content}\n\n‚úÖ Published to channel!",
                    reply_markup=None
                )
            except Exception as e:
                await query.edit_message_text(
                    text=f"{post.content}\n\n‚ùå Failed to publish: {str(e)}",
                    reply_markup=query.message.reply_markup
                ) 