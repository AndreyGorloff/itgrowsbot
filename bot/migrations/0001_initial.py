# Generated by Django 5.0.2 on 2025-04-15 07:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='OpenAISettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(help_text='API ключ для доступа к OpenAI', max_length=255, verbose_name='OpenAI API Key')),
                ('use_local_model', models.BooleanField(default=False, help_text='Использовать локальную модель вместо OpenAI', verbose_name='Use Local Model')),
                ('local_model_name', models.CharField(default='llama2', help_text='Название локальной модели Ollama', max_length=100, verbose_name='Local Model Name')),
                ('temperature', models.FloatField(default=0.7, help_text='Температура генерации (0-1)', verbose_name='Temperature')),
                ('max_tokens', models.IntegerField(default=500, help_text='Максимальное количество токенов', verbose_name='Max Tokens')),
                ('top_p', models.FloatField(default=0.9, help_text='Параметр top_p (0-1)', verbose_name='Top P')),
                ('presence_penalty', models.FloatField(default=0.6, help_text='Штраф за повторение тем', verbose_name='Presence Penalty')),
                ('frequency_penalty', models.FloatField(default=0.6, help_text='Штраф за повторение слов', verbose_name='Frequency Penalty')),
                ('is_active', models.BooleanField(default=True, help_text='Активны ли эти настройки', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'OpenAI Settings',
                'verbose_name_plural': 'OpenAI Settings',
                'ordering': ['-is_active', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Новый топик', max_length=255, verbose_name='Название топика')),
                ('description', models.TextField(blank=True, verbose_name='Описание топика')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
            ],
            options={
                'verbose_name': 'Топик',
                'verbose_name_plural': 'Топики',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_bot_token', models.CharField(help_text='Token obtained from @BotFather', max_length=255, verbose_name='Telegram Bot Token')),
                ('telegram_channel_id', models.CharField(help_text='Channel ID where posts will be published', max_length=255, verbose_name='Telegram Channel ID')),
                ('is_active', models.BooleanField(default=True, help_text='Only one settings instance can be active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'verbose_name': 'Telegram Settings',
                'verbose_name_plural': 'Telegram Settings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Content')),
                ('language', models.CharField(choices=[('ru', 'Russian'), ('en', 'English')], default='ru', max_length=2, verbose_name='Language')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('failed', 'Failed')], default='draft', max_length=10, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Published at')),
                ('telegram_message_id', models.IntegerField(blank=True, null=True, verbose_name='Telegram Message ID')),
                ('edited', models.BooleanField(default=False, verbose_name='Edited')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='bot.topic', verbose_name='Topic')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-created_at'],
            },
        ),
    ]
